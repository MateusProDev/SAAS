/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SiteSlugRouteImport } from './routes/site/$slug'
import { Route as PreviewSiteIdRouteImport } from './routes/preview/$siteId'
import { Route as EditorSiteIdNewRouteImport } from './routes/editor/$siteId.new'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SiteSlugRoute = SiteSlugRouteImport.update({
  id: '/site/$slug',
  path: '/site/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const PreviewSiteIdRoute = PreviewSiteIdRouteImport.update({
  id: '/preview/$siteId',
  path: '/preview/$siteId',
  getParentRoute: () => rootRouteImport,
} as any)
const EditorSiteIdNewRoute = EditorSiteIdNewRouteImport.update({
  id: '/editor/$siteId/new',
  path: '/editor/$siteId/new',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/preview/$siteId': typeof PreviewSiteIdRoute
  '/site/$slug': typeof SiteSlugRoute
  '/editor/$siteId/new': typeof EditorSiteIdNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/preview/$siteId': typeof PreviewSiteIdRoute
  '/site/$slug': typeof SiteSlugRoute
  '/editor/$siteId/new': typeof EditorSiteIdNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/preview/$siteId': typeof PreviewSiteIdRoute
  '/site/$slug': typeof SiteSlugRoute
  '/editor/$siteId/new': typeof EditorSiteIdNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/preview/$siteId'
    | '/site/$slug'
    | '/editor/$siteId/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/preview/$siteId'
    | '/site/$slug'
    | '/editor/$siteId/new'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/preview/$siteId'
    | '/site/$slug'
    | '/editor/$siteId/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  PreviewSiteIdRoute: typeof PreviewSiteIdRoute
  SiteSlugRoute: typeof SiteSlugRoute
  EditorSiteIdNewRoute: typeof EditorSiteIdNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/site/$slug': {
      id: '/site/$slug'
      path: '/site/$slug'
      fullPath: '/site/$slug'
      preLoaderRoute: typeof SiteSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preview/$siteId': {
      id: '/preview/$siteId'
      path: '/preview/$siteId'
      fullPath: '/preview/$siteId'
      preLoaderRoute: typeof PreviewSiteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editor/$siteId/new': {
      id: '/editor/$siteId/new'
      path: '/editor/$siteId/new'
      fullPath: '/editor/$siteId/new'
      preLoaderRoute: typeof EditorSiteIdNewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  PreviewSiteIdRoute: PreviewSiteIdRoute,
  SiteSlugRoute: SiteSlugRoute,
  EditorSiteIdNewRoute: EditorSiteIdNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
