"use client";

import React, { useState } from 'react';
import { usePlan } from '../../../src/contexts/PlanContext';
import Link from 'next/link';
import { useRefreshSites } from '../../../src/hooks/useRefreshSitesContext';
import { useRouter } from 'next/navigation';
import { getFirestore, collection, addDoc, serverTimestamp, getDocs, query, where } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import '../../../src/utils/firebase';
import styles from './new-site.module.css';

// Função para gerar slug único
async function generateUniqueSlug(title: string, db: any): Promise<string> {
  // Gerar slug base
  const baseSlug = (title || 'site')
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');

  let finalSlug = baseSlug;
  let counter = 1;

  // Verificar se o slug já existe e gerar um novo se necessário
  while (true) {
    const slugsRef = collection(db, 'slugs');
    const slugQuery = query(slugsRef, where('slug', '==', finalSlug));
    const slugSnapshot = await getDocs(slugQuery);

    if (slugSnapshot.empty) {
      break;
    }

    finalSlug = `${baseSlug}-${counter}`;
    counter++;
  }

  return finalSlug;
}

export default function NewSitePage() {
  const { plan } = usePlan();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [template, setTemplate] = useState('barbearia');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const refreshSites = useRefreshSites();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const auth = getAuth();
      const user = auth.currentUser;
      if (!user) {
        throw new Error('Usuário não autenticado');
      }

      const db = getFirestore();
      const userSiteRef = collection(db, 'users', user.uid, 'sites');

      // Validação de limite de sites por plano
      const snapshot = await getDocs(userSiteRef);
      const siteCount = snapshot.size;
      
      if ((plan === 'free' || plan === 'basic') && siteCount >= 1) {
        setError('Você atingiu o limite de sites para seu plano atual.');
        return;
      }

      // Gerar slug único para o site
      const siteSlug = await generateUniqueSlug(title, db);

      // Criar o site
      const siteRef = await addDoc(userSiteRef, {
        title,
        description,
        template,
        slug: siteSlug,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        published: false,
        views: 0
      });

      // Registrar o slug na coleção de slugs
      await addDoc(collection(db, 'slugs'), {
        slug: siteSlug,
        userId: user.uid,
        siteId: siteRef.id,
        createdAt: serverTimestamp()
      });

      await refreshSites();
      router.push('/dashboard');
    } catch (error: any) {
      console.error('Error creating site:', error);
      setError(error.message || 'Erro ao criar site');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <h1>Criar Novo Site</h1>
        <Link href="/dashboard">← Voltar ao Dashboard</Link>
      </header>

      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.formGroup}>
          <label htmlFor="title">Nome do Site</label>
          <input
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            placeholder="Ex: Minha Barbearia"
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="description">Descrição</label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Descreva seu site brevemente"
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="template">Template</label>
          <select
            id="template"
            value={template}
            onChange={(e) => setTemplate(e.target.value)}
          >
            <option value="barbearia">Barbearia</option>
            <option value="comercial">Comercial</option>
            <option value="agencia">Agência de Viagens</option>
            <option value="portfolio">Portfólio</option>
          </select>
        </div>

        {error && <div className={styles.error}>{error}</div>}

        <button
          type="submit"
          className={styles.submitButton}
          disabled={loading}
        >
          {loading ? 'Criando...' : 'Criar Site'}
        </button>
      </form>
    </div>
  );
}
